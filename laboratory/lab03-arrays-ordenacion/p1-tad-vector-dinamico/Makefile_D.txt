########################################
### Script por PerguGames
### GitHub: https://github.com/PerduGames
########################################
# Archivo Makefile  
# Archivo para compilar ejecutable en C y C++, 
# buscando las dependencias en sus respectivas carpetas
# ¿Qué pasa cuando escribo "make"?
# Busca dentro del directorio asignado en la variable "SRC" todos los archivos .cpp
# Cambia el sufijo y prefijo de todos los archivos: "src/*.cpp" a "obj/*.o"
# Compila los archivos .cpp y crea los archivos .o en el directorio asignado en la variable "OBJ"
# Enlaza y crea el ejecutable con el nombre que colocas en "coloqueAquiElNombreDeTuEjecutable",
# buscando primero el archivo principal .cpp en el directorio asignado en la variable "PROGRAM"
# y buscando las debidas dependencias, bibliotecas y archivos-objetos que se han creado
# ¿Qué pasa cuando escribo "make run"?
# Ejecuta el programa "coloqueAquiElNombreDeTuEjecutable",
# ¿Qué pasa cuando escribo "make cleanObjetos"?
# Elimina todos los archivos .o en el directorio asignado en la variable "OBJ"
# ¿Qué pasa cuando escribo "make clean"?
# Elimina todos los archivos en el directorio asignado en la variable "BIN" que sería tu
# ejecutable que nombraste en "coloqueAquiElNombreDeTuEjecutable"
# ¿Qué pasa cuando escribo "make tar"?
# Empaqueta todo el directorio actual donde está el archivo makefile con el
# nombre que pongas en "nombreDeTuProyecto"
# Notas:
# Recuerda que al nombrar el ejecutable en "coloqueAquiElNombreDeTuEjecutable",
# debe existir un archivo .cpp con el mismo nombre en el directorio asignado 
# en la variable "PROGRAM", para satisfacer la dependencia del objetivo,
# este archivo sería tu archivo con la función "int main()". 

# Compilador
COMPILADOR=gcc
# COMPILADOR=g++
# Directorio de los archivos .c y .cpp de los programas principales
APPS=./apps
# Directorio de los archivos binarios
BIN=./bin
# Directorio de los archivos .h y .hpp
INCLUDE=./include
# Directorio de los archivos .c y .cpp
SRC=./src
# Directorio de los archivos de bibliotecas
LIB=./lib

# Para optimizar y mostrar más advertencias, versión -std=c++11 
# FLAGS= -O3 -Wall -std=c++11 # para c++ 
FLAGS= -O3 -Wall -Werror
# Para encontrar las bibliotecas utilizadas (en "-lm", solo un ejemplo, en caso de que tu compilador no lo haga por ti)
LIBS= -lm -L $(LIB)

# Toma todos los archivos .cpp y cambia los nombres a .o
# Fuentes .cpp
FONTES=$(wildcard $(SRC)/*.c)
# Eliminar prefijo y sufijo
OBJLIMPAR=$(notdir $(basename $(FONTES)))
# Añadir nuevo prefijo y sufijo
OBJETOS=$(addprefix $(OBJ)/, $(addsuffix .o, $(OBJLIMPAR)))

.PHONY: all cleanObjetos clean tar

all: compilar app

# Archivos .o del proyecto
compilar: $(OBJETOS)

# Ejecutables del proyecto, si tienes ejecutables, separarlos con \$(BIN)/otroArchivoConMain 
app: $(BIN)/app_main.out # en windows es .exe
	echo $(OBJETOS)

# Compilar y crear los archivos-objetos
$(OBJ)/%.o: $(SRC)/%.c $(INCLUDE)/%.h
	$(COMPILADOR) $(FLAGS) -c $< -I $(INCLUDE) -o $@

# Enlazar y crear el ejecutable
$(BIN)/%: $(APPS)/%.c
	$(COMPILADOR) $(FLAGS) $< $(OBJETOS) -I $(INCLUDE) $(LIBS) -o $@

# Ejecutar programa
run:
	$(BIN)/app_main.out

# Limpiar archivos .o
cleanObjetos:
	rm -f $(OBJ)/*.o

# Limpiar ejecutables
clean:
	rm -f $(BIN)/app_main.out

# Empaquetar proyecto
tar:
	tar cvjf nombreDeTuProyecto.tar.bz2 pwd
